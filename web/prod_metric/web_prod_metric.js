(()=>{"use strict";let t="https://tejassrinivasan.pythonanywhere.com/";var e=!1,n=[];let i=-1,o=null,s=-1,a=-1,r=-1,u=0,l=0,d=0,_=0,c=0,h=0;function b(t){s=t,$("#button_answeronly_usertrusts").attr("disabled","true"),$("#button_answeronly_userdistrusts").attr("disabled","true"),$("#button_answeronly_userunsure").attr("disabled","true"),0==t?$("#button_answeronly_usertrusts").attr("activedecision","true"):1==t?$("#button_answeronly_userdistrusts").attr("activedecision","true"):2==t&&$("#button_answeronly_userunsure").attr("activedecision","true"),$("#ai_explanation_div").show()}function m(t){a=t,$("#button_withexplanation_usertrusts").attr("disabled","true"),$("#button_withexplanation_userdistrusts").attr("disabled","true"),$("#button_withexplanation_userunsure").attr("disabled","true"),0==t?$("#button_withexplanation_usertrusts").attr("activedecision","true"):1==t?$("#button_withexplanation_userdistrusts").attr("activedecision","true"):2==t&&$("#button_withexplanation_userunsure").attr("activedecision","true"),$("#ai_explanation_quality_div").show()}function w(t){r=t,$("#button_withexplanationquality_usertrusts").attr("disabled","true"),$("#button_withexplanationquality_userdistrusts").attr("disabled","true"),$("#button_withexplanationquality_userunsure").attr("disabled","true"),0==t?$("#button_withexplanationquality_usertrusts").attr("activedecision","true"):1==t?$("#button_withexplanationquality_userdistrusts").attr("activedecision","true"):2==t&&$("#button_withexplanationquality_userunsure").attr("activedecision","true"),$("#button_next").show(),$("#button_next").removeAttr("disabled")}function y(t){c+=t,0==c?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),c>=5?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),6==c&&($("#instructions_and_decorations").show(),$("#main_box_instructions").hide(),$("#main_box_experiment").show(),f()),$("#main_box_instructions").children(":not(input)").each(((t,e)=>{$(e).hide()})),$(`#instructions_${c}`).show()}function p(t){let e=0;return e=2==t?0:t==1-o.prediction_is_correct?1:-1,e}function v(t){return 2!=t?t==1-o.prediction_is_correct?1:0:-1}document.getElementById("button_answeronly_usertrusts")?.addEventListener("click",(()=>b(0))),document.getElementById("button_answeronly_userdistrusts")?.addEventListener("click",(()=>b(1))),document.getElementById("button_answeronly_userunsure")?.addEventListener("click",(()=>b(2))),document.getElementById("button_withexplanation_usertrusts")?.addEventListener("click",(()=>m(0))),document.getElementById("button_withexplanation_userdistrusts")?.addEventListener("click",(()=>m(1))),document.getElementById("button_withexplanation_userunsure")?.addEventListener("click",(()=>m(2))),document.getElementById("button_withexplanationquality_usertrusts")?.addEventListener("click",(()=>w(0))),document.getElementById("button_withexplanationquality_userdistrusts")?.addEventListener("click",(()=>w(1))),document.getElementById("button_withexplanationquality_userunsure")?.addEventListener("click",(()=>w(2))),$("#button_instructions_next").on("click",(()=>y(1))),$("#button_instructions_prev").on("click",(()=>y(-1))),$("#button_next").on("click",(()=>{let e=_;if(function(){if(2!=r){let t=1-o.prediction_is_correct;r==t?(_+=.1,u+=1):(_+=-.1,l+=1)}else d+=1}(),-1!=i){let n={question_i:i,user_selections:{answeronly:s,withexplanation:a,withexplanationquality:r},user_is_correct:{answeronly:v(s),withexplanation:v(a),withexplanationquality:v(r)},utility_of_explanation:p(a)-p(s),utility_of_quality_metrics:p(r)-p(a),balance:{old:e,new:_}};n.question=o,n.count_exited_page=h,async function(e){e.url_data=globalThis.url_data,console.log("Data"),"study_id"in e.url_data||(e.url_data.study_id="demo_study"),"prolific_id"in e.url_data||(e.url_data.prolific_id="demo_user"),"session_id"in e.url_data||(e.url_data.session_id="demo_session"),e.url_data.queue_id=globalThis.uid,console.log("logged",e),console.log("Logging to",t+"log");try{let n=await $.ajax(t+"log",{data:JSON.stringify({project:"vlm-rationales-study/"+e.url_data.study_id,uid:globalThis.uid.replace("/","_")+"_"+e.url_data.prolific_id,payload:JSON.stringify(e)}),type:"POST",contentType:"application/json"});return await async function(){return new Promise((t=>setTimeout(t,2e3)))}(),n}catch(t){console.log(t)}}(n),h=0}f()}));let g=null;function x(t,e,n,i){g&&(clearInterval(g),g=null),n.forEach((t=>t.setAttribute("disabled","true")));let o=document.createElement("div");o.id=`timer_${e.id}`,o.style.fontWeight="bold",o.style.marginTop="10px",e.appendChild(o);let s=t;o.textContent=`Please wait ${s} second(s) before making your selection.`,g=setInterval((()=>{s--,s>=0?o.textContent=`Please wait ${s} second(s) before making your selection.`:(null!==g&&(clearInterval(g),g=null),g=null,e.removeChild(o),n.forEach((t=>t.removeAttribute("disabled"))),i&&i())}),1e3)}function f(){if(g&&(clearInterval(g),g=null),$("#button_readytoanswer").removeAttr("activedecision"),$("#button_readytoanswer").removeAttr("disabled"),$("#button_readytoanswer").show(),$("#button_answeronly_usertrusts").removeAttr("activedecision"),$("#button_answeronly_usertrusts").removeAttr("disabled"),$("#button_answeronly_userdistrusts").removeAttr("activedecision"),$("#button_answeronly_userdistrusts").removeAttr("disabled"),$("#button_answeronly_userunsure").removeAttr("activedecision"),$("#button_answeronly_userunsure").removeAttr("disabled"),$("#button_withexplanation_usertrusts").removeAttr("activedecision"),$("#button_withexplanation_usertrusts").removeAttr("disabled"),$("#button_withexplanation_userdistrusts").removeAttr("activedecision"),$("#button_withexplanation_userdistrusts").removeAttr("disabled"),$("#button_withexplanation_userunsure").removeAttr("activedecision"),$("#button_withexplanation_userunsure").removeAttr("disabled"),$("#button_withexplanationquality_usertrusts").removeAttr("activedecision"),$("#button_withexplanationquality_usertrusts").removeAttr("disabled"),$("#button_withexplanationquality_userdistrusts").removeAttr("activedecision"),$("#button_withexplanationquality_userdistrusts").removeAttr("disabled"),$("#button_withexplanationquality_userunsure").removeAttr("activedecision"),$("#button_withexplanationquality_userunsure").removeAttr("disabled"),$("#ai_explanation_div").hide(),$("#ai_explanation_quality_div").hide(),$("#button_next").hide(),$("#button_quit").hide(),i+=1,i>=n.length){$("#main_box_experiment").hide(),_=Math.max(0,_);let t=`Your total reward is <b>$${_.toFixed(2)} + $2</b>.`;return t+=`<br>You answered a total of ${i} questions: ${u} correct, ${l} incorrect, ${d} unsure.`,void(e?($("#reward_box_mock").html(t),$("#reward_box_mock").show(),$("#main_box_end_mock").show()):($("#reward_box").html(t),$("#reward_box").show(),$("#main_box_end").show()))}o=n[i];const t=o.question.replace("Choices:","<br><b>Choices:</b>");$("#question_span").html(t),$("#ai_prediction_span").html(o.predicted_answer),$("#ai_explanation_span").html(o.generated_rationale);let s=o.visual_fidelity*o.contrastiveness,a=Math.round(100*s);$("#explanation_product_span").html(`${a}%`),$("#progress").text(`Progress: ${i+1} / ${n.length}`),function(t){const e=document.getElementById("ai_answer_div"),n=[document.getElementById("button_answeronly_usertrusts"),document.getElementById("button_answeronly_userdistrusts"),document.getElementById("button_answeronly_userunsure")];function i(){n.forEach((t=>t?.removeEventListener("click",i))),function(t){const e=document.getElementById("ai_explanation_div"),n=t.split(" ").length,i=Math.max(Math.ceil(3+n/238*60),5),o=[document.getElementById("button_withexplanation_usertrusts"),document.getElementById("button_withexplanation_userdistrusts"),document.getElementById("button_withexplanation_userunsure")];function s(){o.forEach((t=>t?.removeEventListener("click",s))),function(){const t=document.getElementById("ai_explanation_quality_div"),e=[document.getElementById("button_withexplanationquality_usertrusts"),document.getElementById("button_withexplanationquality_userdistrusts"),document.getElementById("button_withexplanationquality_userunsure")];function n(){e.forEach((t=>t?.removeEventListener("click",n))),$("#button_next").show()}e.forEach((t=>t?.removeEventListener("click",n))),e.forEach((t=>t?.addEventListener("click",n))),$("#ai_explanation_quality_div").show(),x(5,t,e,null)}()}o.forEach((t=>t?.removeEventListener("click",s))),o.forEach((t=>t?.addEventListener("click",s))),$("#ai_explanation_div").show(),x(i,e,o,null)}(t)}n.forEach((t=>t?.removeEventListener("click",i))),n.forEach((t=>t?.addEventListener("click",i))),$("#ai_answer_div").show(),x(5,e,n,null)}(o.generated_rationale)}document.onvisibilitychange=()=>{document.hidden?(console.log("Window lost focus."),null!==g&&(clearInterval(g),g=null)):console.log("Window regained focus.")};const E=new URLSearchParams(window.location.search),q=E.get("start"),I=E.get("uid");if(globalThis.url_data=function(t){const e={};for(const[n,i]of t)e[n]=i;return e}(E.entries()),null==globalThis.url_data.study_id&&(globalThis.url_data.study_id="demo_study"),null==globalThis.url_data.prolific_id&&(globalThis.url_data.prolific_id="demo_user"),null==globalThis.url_data.session_id&&(globalThis.url_data.session_id="demo_session"),null!=I){if(globalThis.uid=I,"prolific_random"==globalThis.uid){let t=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${E.get("prolific_queue_name")}/${t}`}}else{let t=null;for(;null==t;)t=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=t}globalThis.url_data.session_id.startsWith("demo")&&(e=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((t=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((t=>{n=t,null!=q&&(i=parseInt(q)-1,console.log("Starting from",i)),y(0),function(){const t=document.getElementById("reward_instructions");t&&(t.innerHTML=`\n            If your final decision is correct, you gain a reward of $${.1.toFixed(2)}. \n            If your final decision is incorrect, you lose $${Math.abs(-.1).toFixed(2)} from your reward. \n            You will see your total reward at the end of the experiment. \n            Your payment is $2.0 plus whatever you accumulate during this experiment.\n        `)}(),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let k=!1;document.onvisibilitychange=()=>{k||(h+=1,k=!0,globalThis.uid.startsWith("demo")||alert("Please don't leave the page. If you do so again, we may restrict paying you."),k=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,