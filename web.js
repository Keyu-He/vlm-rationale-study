(()=>{"use strict";let t="https://tejassrinivasan.pythonanywhere.com/";var e=!1,n=[];let i=-1,o=null,r=-1,s=-1,a=-1,u=0,l=0,_=0,c=0,d=0,h=0;function m(t){r=t,$("#button_answeronly_usertrusts").attr("disabled","true"),$("#button_answeronly_userdistrusts").attr("disabled","true"),$("#button_answeronly_userunsure").attr("disabled","true"),0==t?$("#button_answeronly_usertrusts").attr("activedecision","true"):1==t?$("#button_answeronly_userdistrusts").attr("activedecision","true"):2==t&&$("#button_answeronly_userunsure").attr("activedecision","true"),$("#ai_explanation_div").show()}function b(t){s=t,$("#button_withexplanation_usertrusts").attr("disabled","true"),$("#button_withexplanation_userdistrusts").attr("disabled","true"),$("#button_withexplanation_userunsure").attr("disabled","true"),0==t?$("#button_withexplanation_usertrusts").attr("activedecision","true"):1==t?$("#button_withexplanation_userdistrusts").attr("activedecision","true"):2==t&&$("#button_withexplanation_userunsure").attr("activedecision","true"),"vf_only"!=k&&"vf_contr_both"!=k||("numeric"==A&&$("#vf_numeric_div").show(),"descriptive"==A&&$("#vf_descriptive_div").show()),"contr_only"!=k&&"vf_contr_both"!=k||("numeric"==A&&$("#contr_numeric_div").show(),"descriptive"==A&&$("#contr_descriptive_div").show()),"single_numeric"==k&&(function(t){if(!t)throw"qualityFormat must be numeric for single_numeric"}("numeric"==A),$("#single_numeric_div").show())}function v(t){a=t,$("#button_withexplanationquality_usertrusts").attr("disabled","true"),$("#button_withexplanationquality_userdistrusts").attr("disabled","true"),$("#button_withexplanationquality_userunsure").attr("disabled","true"),0==t?$("#button_withexplanationquality_usertrusts").attr("activedecision","true"):1==t?$("#button_withexplanationquality_userdistrusts").attr("activedecision","true"):2==t&&$("#button_withexplanationquality_userunsure").attr("activedecision","true"),$("#button_next").show(),$("#button_next").removeAttr("disabled")}function p(t){return globalThis.noChoicesDataset?`img/${t}_no_choices.png`:`img/${t}.png`}function y(t){d+=t,0==d?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),d>=5?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),6==d&&($("#instructions_and_decorations").show(),$("#main_box_instructions").hide(),$("#main_box_experiment").show(),E()),$("#main_box_instructions").children(":not(input)").each(((t,e)=>{$(e).hide()})),$(`#instructions_${d}`).show(),4==d&&($("#instructions_4").children("div").each(((t,e)=>{$(e).hide()})),"vf_contr_both"==k&&"numeric"==A&&$("#instruction_vf_contr_both_numeric").show(),"vf_only"==k&&"numeric"==A&&$("#instruction_vf_numeric").show(),"contr_only"==k&&"numeric"==A&&$("#instruction_contr_numeric").show(),"single_numeric"==k&&"numeric"==A&&$("#instruction_single_numeric").show(),"vf_contr_both"==k&&"descriptive"==A&&$("#instruction_vf_contr_both_descriptive").show(),"vf_only"==k&&"descriptive"==A&&$("#instruction_vf_descriptive").show(),"contr_only"==k&&"descriptive"==A&&$("#instruction_contr_descriptive").show())}function w(t){let e=0;return e=2==t?0:t==1-o.prediction_is_correct?1:-1,e}function g(t){return 2!=t?t==1-o.prediction_is_correct?1:0:-1}document.getElementById("button_answeronly_usertrusts")?.addEventListener("click",(()=>m(0))),document.getElementById("button_answeronly_userdistrusts")?.addEventListener("click",(()=>m(1))),document.getElementById("button_answeronly_userunsure")?.addEventListener("click",(()=>m(2))),document.getElementById("button_withexplanation_usertrusts")?.addEventListener("click",(()=>b(0))),document.getElementById("button_withexplanation_userdistrusts")?.addEventListener("click",(()=>b(1))),document.getElementById("button_withexplanation_userunsure")?.addEventListener("click",(()=>b(2))),document.getElementById("button_withexplanationquality_usertrusts")?.addEventListener("click",(()=>v(0))),document.getElementById("button_withexplanationquality_userdistrusts")?.addEventListener("click",(()=>v(1))),document.getElementById("button_withexplanationquality_userunsure")?.addEventListener("click",(()=>v(2))),$("#button_instructions_next").on("click",(()=>y(1))),$("#button_instructions_prev").on("click",(()=>y(-1))),$("#button_next").on("click",(()=>{let e=c;if(function(){if(2!=a){let t=1-o.prediction_is_correct;a==t?(c+=.1,u+=1):(c+=-.1,l+=1)}else _+=1}(),-1!=i){let n={question_i:i,user_selections:{answeronly:r,withexplanation:s,withexplanationquality:a},user_is_correct:{answeronly:g(r),withexplanation:g(s),withexplanationquality:g(a)},utility_of_explanation:w(s)-w(r),utility_of_quality_metrics:w(a)-w(s),balance:{old:e,new:c}};n.question=o,n.count_exited_page=h,async function(e){e.url_data=globalThis.url_data,console.log("Data"),"study_id"in e.url_data||(e.url_data.study_id="demo_study"),"prolific_id"in e.url_data||(e.url_data.prolific_id="demo_user"),"session_id"in e.url_data||(e.url_data.session_id="demo_session"),e.url_data.queue_id=globalThis.uid,console.log("logged",e),console.log("Logging to",t+"log");try{let n=await $.ajax(t+"log",{data:JSON.stringify({project:"vlm-rationales-study/"+e.url_data.study_id,uid:globalThis.uid.replace("/","_")+"_"+e.url_data.prolific_id,payload:JSON.stringify(e)}),type:"POST",contentType:"application/json"});return await async function(){return new Promise((t=>setTimeout(t,2e3)))}(),n}catch(t){console.log(t)}}(n),h=0}E()}));let f=null;function x(t,e,n,i){f&&(clearInterval(f),f=null),n.forEach((t=>t.setAttribute("disabled","true")));let o=document.createElement("div");o.id=`timer_${e.id}`,o.style.fontWeight="bold",o.style.marginTop="10px",e.appendChild(o);let r=t;o.textContent=`Please wait ${r} second(s) before making your selection.`,f=setInterval((()=>{r--,r>=0?o.textContent=`Please wait ${r} second(s) before making your selection.`:(null!==f&&(clearInterval(f),f=null),f=null,e.removeChild(o),n.forEach((t=>t.removeAttribute("disabled"))),i&&i())}),1e3)}function E(){if(f&&(clearInterval(f),f=null),$("#button_readytoanswer").removeAttr("activedecision"),$("#button_readytoanswer").removeAttr("disabled"),$("#button_readytoanswer").show(),$("#button_answeronly_usertrusts").removeAttr("activedecision"),$("#button_answeronly_usertrusts").removeAttr("disabled"),$("#button_answeronly_userdistrusts").removeAttr("activedecision"),$("#button_answeronly_userdistrusts").removeAttr("disabled"),$("#button_answeronly_userunsure").removeAttr("activedecision"),$("#button_answeronly_userunsure").removeAttr("disabled"),$("#button_withexplanation_usertrusts").removeAttr("activedecision"),$("#button_withexplanation_usertrusts").removeAttr("disabled"),$("#button_withexplanation_userdistrusts").removeAttr("activedecision"),$("#button_withexplanation_userdistrusts").removeAttr("disabled"),$("#button_withexplanation_userunsure").removeAttr("activedecision"),$("#button_withexplanation_userunsure").removeAttr("disabled"),$("#button_withexplanationquality_usertrusts").removeAttr("activedecision"),$("#button_withexplanationquality_usertrusts").removeAttr("disabled"),$("#button_withexplanationquality_userdistrusts").removeAttr("activedecision"),$("#button_withexplanationquality_userdistrusts").removeAttr("disabled"),$("#button_withexplanationquality_userunsure").removeAttr("activedecision"),$("#button_withexplanationquality_userunsure").removeAttr("disabled"),$("#ai_explanation_div").hide(),$("#ai_explanation_quality_div").hide(),$("#button_next").hide(),$("#button_quit").hide(),i+=1,i>=n.length){$("#main_box_experiment").hide(),c=Math.max(0,c);let t=`Your total reward is <b>$${c.toFixed(2)} + $2</b>.`;return t+=`<br>You answered a total of ${i} questions: ${u} correct, ${l} incorrect, ${_} unsure.`,void(e?($("#reward_box_mock").html(t),$("#reward_box_mock").show(),$("#main_box_end_mock").show()):($("#reward_box").html(t),$("#reward_box").show(),$("#main_box_end").show()))}o=n[i];const t=o.question.replace("Choices:","<br><b>Choices:</b>");$("#question_span").html(t),$("#ai_prediction_span").html(o.predicted_answer),$("#ai_explanation_span").html(o.generated_rationale);let r=Math.round(100*o.visual_fidelity);$("#explanation_fidelity_numeric_span").html(`${r}%`);let s=Math.round(100*o.contrastiveness);$("#explanation_contrastiveness_numeric_span").html(`${s}%`);let a=Math.round((o.visual_fidelity+o.contrastiveness)/2*100);$("#explanation_single_numeric_span").html(`${a}%`);let d="";""==o.reason_vf_correct?d+="<b>There are no details about the image in the explanation that are likely correct.</b>":(d+="<b>Details in the explanation that are likely correct:</b>",d+=o.reason_vf_correct.replace(/<br> -/g,"<br> ✅")),""==o.reason_vf_incorrect?d+="<br><br><b>There are no details about the image in the explanation that are likely incorrect.</b>":(d+="<br><br><b>Details in the explanation that are likely NOT correct:</b>",d+=o.reason_vf_incorrect.replace(/<br> -/g,"<br> ❌")),$("#explanation_fidelity_descriptive_span").html(d);let h="";""==o.reason_contr?h+="<b>None of the other choices are likely correct, based on the explanation.</b>":(h+="<b>Other choices that could be correct, based on the explanation: </b>",h+=o.reason_contr),$("#explanation_contrastiveness_descriptive_span").html(h),$("#progress").text(`Progress: ${i+1} / ${n.length}`),function(t){const e=document.getElementById("ai_answer_div"),n=[document.getElementById("button_answeronly_usertrusts"),document.getElementById("button_answeronly_userdistrusts"),document.getElementById("button_answeronly_userunsure")];function i(){n.forEach((t=>t?.removeEventListener("click",i))),function(t){const e=document.getElementById("ai_explanation_div"),n=t.split(" ").length,i=Math.max(Math.ceil(3+n/238*60),5),o=[document.getElementById("button_withexplanation_usertrusts"),document.getElementById("button_withexplanation_userdistrusts"),document.getElementById("button_withexplanation_userunsure")];function r(){o.forEach((t=>t?.removeEventListener("click",r))),function(){const t=document.getElementById("ai_explanation_quality_div"),e=[document.getElementById("button_withexplanationquality_usertrusts"),document.getElementById("button_withexplanationquality_userdistrusts"),document.getElementById("button_withexplanationquality_userunsure")];function n(){e.forEach((t=>t?.removeEventListener("click",n))),$("#button_next").show()}e.forEach((t=>t?.removeEventListener("click",n))),e.forEach((t=>t?.addEventListener("click",n))),$("#ai_explanation_quality_div").show(),x(5,t,e,null)}()}o.forEach((t=>t?.removeEventListener("click",r))),o.forEach((t=>t?.addEventListener("click",r))),$("#ai_explanation_div").show(),x(i,e,o,null)}(t)}n.forEach((t=>t?.removeEventListener("click",i))),n.forEach((t=>t?.addEventListener("click",i))),$("#ai_answer_div").show(),x(5,e,n,null)}(o.generated_rationale)}document.onvisibilitychange=()=>{document.hidden?(console.log("Window lost focus."),null!==f&&(clearInterval(f),f=null)):console.log("Window regained focus.")};const q=new URLSearchParams(window.location.search),I=q.get("start"),T=q.get("uid");if(globalThis.url_data=function(t){const e={};for(const[n,i]of t)e[n]=i;return e}(q.entries()),null==globalThis.url_data.study_id&&(globalThis.url_data.study_id="demo_study"),null==globalThis.url_data.prolific_id&&(globalThis.url_data.prolific_id="demo_user"),null==globalThis.url_data.session_id&&(globalThis.url_data.session_id="demo_session"),null!=T){if(globalThis.uid=T,"prolific_random"==globalThis.uid){let t=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${q.get("prolific_queue_name")}/${t}`}}else{let t=null;for(;null==t;)t=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=t}globalThis.noChoicesDataset=globalThis.uid.includes("vizwiz");let k=q.get("quality_type");if(null==k&&(k="vf_contr_both"),!["vf_only","contr_only","vf_contr_both","single_numeric"].includes(k))throw new Error("Invalid quality type");let A=q.get("quality_format");if(null==A&&(A="numeric"),!["numeric","descriptive"].includes(A))throw new Error("Invalid quality format");globalThis.url_data.explanation_quality_params={quality_type:k,quality_format:A},console.log("Quality params",globalThis.url_data.explanation_quality_params),globalThis.url_data.session_id.startsWith("demo")&&(e=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((t=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((t=>{n=t,null!=I&&(i=parseInt(I)-1,console.log("Starting from",i)),y(0),$("#img_instr_1").attr("src",p("instructions_1")),$("#img_instr_2").attr("src",p("instructions_2")),$("#img_instr_3").attr("src",p("instructions_3")),$("#img_instr_4_vf_contr_both_numeric").attr("src",p("instructions_4_vf_contr_both_numeric")),$("#img_instr_4_vf_numeric").attr("src",p("instructions_4_vf_numeric")),$("#img_instr_4_contr_numeric").attr("src",p("instructions_4_contr_numeric")),$("#img_instr_4_single_numeric").attr("src",p("instructions_4_single_numeric")),$("#img_instr_4_vf_contr_both_descriptive").attr("src",p("instructions_4_vf_contr_both_descriptive")),$("#img_instr_4_vf_descriptive").attr("src",p("instructions_4_vf_descriptive")),$("#img_instr_4_contr_descriptive").attr("src",p("instructions_4_contr_descriptive")),function(){const t=document.getElementById("reward_instructions");t&&(t.innerHTML=`\n            If your final decision is correct, you gain a reward of $${.1.toFixed(2)}. \n            If your final decision is incorrect, you lose $${Math.abs(-.1).toFixed(2)} from your reward. \n            You will see your total reward at the end of the experiment. \n            Your payment is $2.0 plus whatever you accumulate during this experiment.\n        `)}(),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let B=!1;document.onvisibilitychange=()=>{B||(h+=1,B=!0,globalThis.uid.startsWith("demo")||alert("Please don't leave the page. If you do so again, we may restrict paying you."),B=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,