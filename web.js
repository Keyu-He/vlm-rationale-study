(()=>{"use strict";let t="https://tejassrinivasan.pythonanywhere.com/";var e=!1,n=[];let i=-1,o=null,s=-1,a=-1,r=-1,u=0,l=0,d=0;function _(t){s=t,$("#button_answeronly_usertrusts").attr("disabled","true"),$("#button_answeronly_userdistrusts").attr("disabled","true"),$("#button_answeronly_userunsure").attr("disabled","true"),0==t?$("#button_answeronly_usertrusts").attr("activedecision","true"):1==t?$("#button_answeronly_userdistrusts").attr("activedecision","true"):2==t&&$("#button_answeronly_userunsure").attr("activedecision","true"),$("#ai_explanation_div").show()}function c(t){a=t,$("#button_withexplanation_usertrusts").attr("disabled","true"),$("#button_withexplanation_userdistrusts").attr("disabled","true"),$("#button_withexplanation_userunsure").attr("disabled","true"),0==t?$("#button_withexplanation_usertrusts").attr("activedecision","true"):1==t?$("#button_withexplanation_userdistrusts").attr("activedecision","true"):2==t&&$("#button_withexplanation_userunsure").attr("activedecision","true"),$("#ai_explanation_quality_div").show()}function h(t){r=t,$("#button_withexplanationquality_usertrusts").attr("disabled","true"),$("#button_withexplanationquality_userdistrusts").attr("disabled","true"),$("#button_withexplanationquality_userunsure").attr("disabled","true"),0==t?$("#button_withexplanationquality_usertrusts").attr("activedecision","true"):1==t?$("#button_withexplanationquality_userdistrusts").attr("activedecision","true"):2==t&&$("#button_withexplanationquality_userunsure").attr("activedecision","true"),$("#button_next").show(),$("#button_next").removeAttr("disabled")}function b(t){l+=t,0==l?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),l>=5?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),6==l&&($("#instructions_and_decorations").show(),$("#main_box_instructions").hide(),$("#main_box_experiment").show(),v()),$("#main_box_instructions").children(":not(input)").each(((t,e)=>{$(e).hide()})),$(`#instructions_${l}`).show()}function m(t){return 2!=t?t==1-o.prediction_is_correct?1:0:-1}document.getElementById("button_answeronly_usertrusts")?.addEventListener("click",(()=>_(0))),document.getElementById("button_answeronly_userdistrusts")?.addEventListener("click",(()=>_(1))),document.getElementById("button_answeronly_userunsure")?.addEventListener("click",(()=>_(2))),document.getElementById("button_withexplanation_usertrusts")?.addEventListener("click",(()=>c(0))),document.getElementById("button_withexplanation_userdistrusts")?.addEventListener("click",(()=>c(1))),document.getElementById("button_withexplanation_userunsure")?.addEventListener("click",(()=>c(2))),document.getElementById("button_withexplanationquality_usertrusts")?.addEventListener("click",(()=>h(0))),document.getElementById("button_withexplanationquality_userdistrusts")?.addEventListener("click",(()=>h(1))),document.getElementById("button_withexplanationquality_userunsure")?.addEventListener("click",(()=>h(2))),$("#button_instructions_next").on("click",(()=>b(1))),$("#button_instructions_prev").on("click",(()=>b(-1))),$("#button_next").on("click",(()=>{let e=u;if(function(){if(2!=r){let t=1-o.prediction_is_correct;u+=r==t?.1:-.1}}(),-1!=i){let n={question_i:i,user_selections:{answeronly:s,withexplanation:a,withexplanationquality:r},user_is_correct:{answeronly:m(s),withexplanation:m(a),withexplanationquality:m(r)},balance:{old:e,new:u}};n.question=o,n.count_exited_page=d,async function(e){e.url_data=globalThis.url_data,console.log("Data"),"study_id"in e.url_data||(e.url_data.study_id="demo_study"),"prolific_id"in e.url_data||(e.url_data.prolific_id="demo_user"),"session_id"in e.url_data||(e.url_data.session_id="demo_session"),e.url_data.queue_id=globalThis.uid,console.log("logged",e),console.log("Logging to",t+"log");try{let n=await $.ajax(t+"log",{data:JSON.stringify({project:"vlm-rationales-study/"+e.url_data.study_id,uid:globalThis.uid+"_"+e.url_data.prolific_id,payload:JSON.stringify(e)}),type:"POST",contentType:"application/json"});return await async function(){return new Promise((t=>setTimeout(t,2e3)))}(),n}catch(t){console.log(t)}}(n),d=0}v()}));let w=null;function y(t,e,n,i){w&&(clearInterval(w),w=null),n.forEach((t=>t.setAttribute("disabled","true")));let o=document.createElement("div");o.id=`timer_${e.id}`,o.style.fontWeight="bold",e.appendChild(o);let s=t;o.textContent=`Please wait ${s} second(s) before making your selection.`,w=setInterval((()=>{s--,s>=0?o.textContent=`Please wait ${s} second(s) before making your selection.`:(null!==w&&(clearInterval(w),w=null),w=null,e.removeChild(o),n.forEach((t=>t.removeAttribute("disabled"))),i&&i())}),1e3)}function v(){if(w&&(clearInterval(w),w=null),$("#button_readytoanswer").removeAttr("activedecision"),$("#button_readytoanswer").removeAttr("disabled"),$("#button_readytoanswer").show(),$("#button_answeronly_usertrusts").removeAttr("activedecision"),$("#button_answeronly_usertrusts").removeAttr("disabled"),$("#button_answeronly_userdistrusts").removeAttr("activedecision"),$("#button_answeronly_userdistrusts").removeAttr("disabled"),$("#button_answeronly_userunsure").removeAttr("activedecision"),$("#button_answeronly_userunsure").removeAttr("disabled"),$("#button_withexplanation_usertrusts").removeAttr("activedecision"),$("#button_withexplanation_usertrusts").removeAttr("disabled"),$("#button_withexplanation_userdistrusts").removeAttr("activedecision"),$("#button_withexplanation_userdistrusts").removeAttr("disabled"),$("#button_withexplanation_userunsure").removeAttr("activedecision"),$("#button_withexplanation_userunsure").removeAttr("disabled"),$("#button_withexplanationquality_usertrusts").removeAttr("activedecision"),$("#button_withexplanationquality_usertrusts").removeAttr("disabled"),$("#button_withexplanationquality_userdistrusts").removeAttr("activedecision"),$("#button_withexplanationquality_userdistrusts").removeAttr("disabled"),$("#button_withexplanationquality_userunsure").removeAttr("activedecision"),$("#button_withexplanationquality_userunsure").removeAttr("disabled"),$("#ai_explanation_div").hide(),$("#ai_explanation_quality_div").hide(),$("#button_next").hide(),$("#button_quit").hide(),i+=1,i>=n.length)return $("#main_box_experiment").hide(),u=Math.max(0,u),void(e?($("#reward_box_mock").text(`Your total reward is $${u.toFixed(2)} (${i} questions answered) + $2.`),$("#reward_box_mock").show(),$("#main_box_end_mock").show()):($("#reward_box").text(`Your total reward is $${u.toFixed(2)} (${i} questions answered) + $2.`),$("#reward_box").show(),$("#main_box_end").show()));o=n[i];const t=o.question.replace("Choices:","<br><b>Choices:</b>");$("#question_span").html(t),$("#ai_prediction_span").html(o.predicted_answer),$("#ai_explanation_span").html(o.generated_rationale);let s=Math.round(100*o["visual fidelity"]);$("#explanation_fidelity_span").html(`${s}%`);let a=Math.round(100*o.contrastiveness);$("#explanation_contrastiveness_span").html(`${a}%`),$("#progress").text(`Progress: ${i+1} / ${n.length}`),function(t){const e=document.getElementById("ai_answer_div"),n=[document.getElementById("button_answeronly_usertrusts"),document.getElementById("button_answeronly_userdistrusts"),document.getElementById("button_answeronly_userunsure")];function i(){n.forEach((t=>t?.removeEventListener("click",i))),function(t){const e=document.getElementById("ai_explanation_div"),n=t.split(" ").length,i=Math.max(Math.ceil(3+n/238*60),5),o=[document.getElementById("button_withexplanation_usertrusts"),document.getElementById("button_withexplanation_userdistrusts"),document.getElementById("button_withexplanation_userunsure")];function s(){o.forEach((t=>t?.removeEventListener("click",s))),function(){const t=document.getElementById("ai_explanation_quality_div"),e=[document.getElementById("button_withexplanationquality_usertrusts"),document.getElementById("button_withexplanationquality_userdistrusts"),document.getElementById("button_withexplanationquality_userunsure")];function n(){e.forEach((t=>t?.removeEventListener("click",n))),$("#button_next").show()}e.forEach((t=>t?.removeEventListener("click",n))),e.forEach((t=>t?.addEventListener("click",n))),$("#ai_explanation_quality_div").show(),y(5,t,e,null)}()}o.forEach((t=>t?.removeEventListener("click",s))),o.forEach((t=>t?.addEventListener("click",s))),$("#ai_explanation_div").show(),y(i,e,o,null)}(t)}n.forEach((t=>t?.removeEventListener("click",i))),n.forEach((t=>t?.addEventListener("click",i))),$("#ai_answer_div").show(),y(5,e,n,null)}(o.generated_rationale)}document.onvisibilitychange=()=>{document.hidden?(console.log("Window lost focus."),null!==w&&(clearInterval(w),w=null)):console.log("Window regained focus.")};const p=new URLSearchParams(window.location.search),x=p.get("start"),g=p.get("uid");if(globalThis.url_data=function(t){const e={};for(const[n,i]of t)e[n]=i;return e}(p.entries()),null==globalThis.url_data.study_id&&(globalThis.url_data.study_id="demo_study"),null==globalThis.url_data.prolific_id&&(globalThis.url_data.prolific_id="demo_user"),null==globalThis.url_data.session_id&&(globalThis.url_data.session_id="demo_session"),null!=g){if(globalThis.uid=g,"prolific_random"==globalThis.uid){let t=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${p.get("prolific_queue_name")}/${t}`}}else{let t=null;for(;null==t;)t=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=t}globalThis.url_data.session_id.startsWith("demo")&&(e=!0),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((t=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((t=>{n=t,null!=x&&(i=parseInt(x)-1,console.log("Starting from",i)),b(0),function(){const t=document.getElementById("reward_instructions");t&&(t.innerHTML=`\n            If your final decision is correct, you gain a reward of $${.1.toFixed(2)}. \n            If your final decision is incorrect, you lose $${Math.abs(-.1).toFixed(2)} from your reward. \n            You will see your total reward at the end of the experiment. \n            Your payment is $2.0 plus whatever you accumulate during this experiment.\n        `)}(),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let f=!1;document.onvisibilitychange=()=>{f||(d+=1,f=!0,f=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,