(()=>{"use strict";let t="https://tejassrinivasan.pythonanywhere.com/";var e=[];let n=-1,i=null,r=-1,o=-1,s=-1,a=0,u=0,l=0,_=0,c=0,d=0;function h(t){r=t,$("#button_answeronly_usertrusts").attr("disabled","true"),$("#button_answeronly_userdistrusts").attr("disabled","true"),$("#button_answeronly_userunsure").attr("disabled","true"),0==t?$("#button_answeronly_usertrusts").attr("activedecision","true"):1==t?$("#button_answeronly_userdistrusts").attr("activedecision","true"):2==t&&$("#button_answeronly_userunsure").attr("activedecision","true"),$("#ai_explanation_div").show()}function m(t){o=t,$("#button_withexplanation_usertrusts").attr("disabled","true"),$("#button_withexplanation_userdistrusts").attr("disabled","true"),$("#button_withexplanation_userunsure").attr("disabled","true"),0==t?$("#button_withexplanation_usertrusts").attr("activedecision","true"):1==t?$("#button_withexplanation_userdistrusts").attr("activedecision","true"):2==t&&$("#button_withexplanation_userunsure").attr("activedecision","true"),"vf_only"!=T&&"vf_contr_both"!=T||("numeric"==k&&$("#vf_numeric_div").show(),"descriptive"==k&&$("#vf_descriptive_div").show()),"contr_only"!=T&&"vf_contr_both"!=T||("numeric"==k&&$("#contr_numeric_div").show(),"descriptive"==k&&$("#contr_descriptive_div").show()),"single_numeric"==T&&(function(t){if(!t)throw"qualityFormat must be numeric for single_numeric"}("numeric"==k),$("#single_numeric_div").show())}function b(t){s=t,$("#button_withexplanationquality_usertrusts").attr("disabled","true"),$("#button_withexplanationquality_userdistrusts").attr("disabled","true"),$("#button_withexplanationquality_userunsure").attr("disabled","true"),0==t?$("#button_withexplanationquality_usertrusts").attr("activedecision","true"):1==t?$("#button_withexplanationquality_userdistrusts").attr("activedecision","true"):2==t&&$("#button_withexplanationquality_userunsure").attr("activedecision","true"),$("#button_next").show(),$("#button_next").removeAttr("disabled")}function v(t){return globalThis.noChoicesDataset?`img/${t}_no_choices.png`:`img/${t}.png`}function p(t){c+=t,0==c?$("#button_instructions_prev").attr("disabled","true"):$("#button_instructions_prev").removeAttr("disabled"),c>=5?($("#instructions_and_decorations").show(),$("#button_instructions_next").val("Start study")):($("#instructions_and_decorations").hide(),$("#button_instructions_next").val("Next")),6==c&&($("#instructions_and_decorations").show(),$("#main_box_instructions").hide(),$("#main_box_experiment").show(),x()),$("#main_box_instructions").children(":not(input)").each(((t,e)=>{$(e).hide()})),$(`#instructions_${c}`).show(),4==c&&($("#instructions_4").children("div").each(((t,e)=>{$(e).hide()})),"vf_contr_both"==T&&"numeric"==k&&$("#instruction_vf_contr_both_numeric").show(),"vf_only"==T&&"numeric"==k&&$("#instruction_vf_numeric").show(),"contr_only"==T&&"numeric"==k&&$("#instruction_contr_numeric").show(),"single_numeric"==T&&"numeric"==k&&$("#instruction_single_numeric").show(),"vf_contr_both"==T&&"descriptive"==k&&$("#instruction_vf_contr_both_descriptive").show(),"vf_only"==T&&"descriptive"==k&&$("#instruction_vf_descriptive").show(),"contr_only"==T&&"descriptive"==k&&$("#instruction_contr_descriptive").show())}function y(t){let e=0;return e=2==t?0:t==1-i.prediction_is_correct?1:-1,e}function w(t){return 2!=t?t==1-i.prediction_is_correct?1:0:-1}document.getElementById("button_answeronly_usertrusts")?.addEventListener("click",(()=>h(0))),document.getElementById("button_answeronly_userdistrusts")?.addEventListener("click",(()=>h(1))),document.getElementById("button_answeronly_userunsure")?.addEventListener("click",(()=>h(2))),document.getElementById("button_withexplanation_usertrusts")?.addEventListener("click",(()=>m(0))),document.getElementById("button_withexplanation_userdistrusts")?.addEventListener("click",(()=>m(1))),document.getElementById("button_withexplanation_userunsure")?.addEventListener("click",(()=>m(2))),document.getElementById("button_withexplanationquality_usertrusts")?.addEventListener("click",(()=>b(0))),document.getElementById("button_withexplanationquality_userdistrusts")?.addEventListener("click",(()=>b(1))),document.getElementById("button_withexplanationquality_userunsure")?.addEventListener("click",(()=>b(2))),$("#button_instructions_next").on("click",(()=>p(1))),$("#button_instructions_prev").on("click",(()=>p(-1))),$("#button_next").on("click",(()=>{let e=_;if(function(){if(2!=s){let t=1-i.prediction_is_correct;s==t?(_+=.1,a+=1):(_+=-.1,u+=1)}else l+=1}(),-1!=n){let a={question_i:n,user_selections:{answeronly:r,withexplanation:o,withexplanationquality:s},user_is_correct:{answeronly:w(r),withexplanation:w(o),withexplanationquality:w(s)},utility_of_explanation:y(o)-y(r),utility_of_quality_metrics:y(s)-y(o),balance:{old:e,new:_}};a.question=i,a.count_exited_page=d,async function(e){e.url_data=globalThis.url_data,console.log("Data"),"study_id"in e.url_data||(e.url_data.study_id="demo_study"),"prolific_id"in e.url_data||(e.url_data.prolific_id="demo_user"),"session_id"in e.url_data||(e.url_data.session_id="demo_session"),e.url_data.queue_id=globalThis.uid,console.log("logged",e),console.log("Logging to",t+"log");try{let n=await $.ajax(t+"log",{data:JSON.stringify({project:"vlm-rationales-study/"+e.url_data.study_id,uid:globalThis.uid.replace("/","_")+"_"+e.url_data.prolific_id,payload:JSON.stringify(e)}),type:"POST",contentType:"application/json"});return await async function(){return new Promise((t=>setTimeout(t,2e3)))}(),n}catch(t){console.log(t)}}(a),d=0}x()}));let g=null;function f(t,e,n,i){g&&(clearInterval(g),g=null),n.forEach((t=>t.setAttribute("disabled","true")));let r=document.createElement("div");r.id=`timer_${e.id}`,r.style.fontWeight="bold",r.style.marginTop="10px",e.appendChild(r);let o=t;r.textContent=`Please wait ${o} second(s) before making your selection.`,g=setInterval((()=>{o--,o>=0?r.textContent=`Please wait ${o} second(s) before making your selection.`:(null!==g&&(clearInterval(g),g=null),g=null,e.removeChild(r),n.forEach((t=>t.removeAttribute("disabled"))),i&&i())}),1e3)}function x(){if(g&&(clearInterval(g),g=null),$("#button_readytoanswer").removeAttr("activedecision"),$("#button_readytoanswer").removeAttr("disabled"),$("#button_readytoanswer").show(),$("#button_answeronly_usertrusts").removeAttr("activedecision"),$("#button_answeronly_usertrusts").removeAttr("disabled"),$("#button_answeronly_userdistrusts").removeAttr("activedecision"),$("#button_answeronly_userdistrusts").removeAttr("disabled"),$("#button_answeronly_userunsure").removeAttr("activedecision"),$("#button_answeronly_userunsure").removeAttr("disabled"),$("#button_withexplanation_usertrusts").removeAttr("activedecision"),$("#button_withexplanation_usertrusts").removeAttr("disabled"),$("#button_withexplanation_userdistrusts").removeAttr("activedecision"),$("#button_withexplanation_userdistrusts").removeAttr("disabled"),$("#button_withexplanation_userunsure").removeAttr("activedecision"),$("#button_withexplanation_userunsure").removeAttr("disabled"),$("#button_withexplanationquality_usertrusts").removeAttr("activedecision"),$("#button_withexplanationquality_usertrusts").removeAttr("disabled"),$("#button_withexplanationquality_userdistrusts").removeAttr("activedecision"),$("#button_withexplanationquality_userdistrusts").removeAttr("disabled"),$("#button_withexplanationquality_userunsure").removeAttr("activedecision"),$("#button_withexplanationquality_userunsure").removeAttr("disabled"),$("#ai_explanation_div").hide(),$("#ai_explanation_quality_div").hide(),$("#button_next").hide(),$("#button_quit").hide(),n+=1,n>=e.length){$("#main_box_experiment").hide(),_=Math.max(0,_);let t=`Your total reward is <b>$${_.toFixed(2)} + $2</b>.`;return t+=`<br>You answered a total of ${n} questions: ${a} correct, ${u} incorrect, ${l} unsure.`,$("#reward_box").html(t),$("#reward_box").show(),void $("#main_box_end").show()}i=e[n];const t=i.question.replace("Choices:","<br><b>Choices:</b>");$("#question_span").html(t),$("#ai_prediction_span").html(i.predicted_answer),$("#ai_explanation_span").html(i.generated_rationale);let r=Math.round(100*i.visual_fidelity);$("#explanation_fidelity_numeric_span").html(`${r}%`);let o=Math.round(100*i.contrastiveness);$("#explanation_contrastiveness_numeric_span").html(`${o}%`);let s=Math.round((i.visual_fidelity+i.contrastiveness)/2*100);$("#explanation_single_numeric_span").html(`${s}%`);let c="";""==i.reason_vf_correct?c+="<b>There are no details about the image in the explanation that are likely correct.</b>":(c+="<b>Details in the explanation that are likely correct:</b>",c+=i.reason_vf_correct.replace(/<br> -/g,"<br> ✅")),""==i.reason_vf_incorrect?c+="<br><br><b>There are no details about the image in the explanation that are likely incorrect.</b>":(c+="<br><br><b>Details in the explanation that are likely NOT correct:</b>",c+=i.reason_vf_incorrect.replace(/<br> -/g,"<br> ❌")),$("#explanation_fidelity_descriptive_span").html(c);let d="";""==i.reason_contr?d+="<b>None of the other choices are likely correct, based on the explanation.</b>":(d+="<b>Other choices that could be correct, based on the explanation: </b>",d+=i.reason_contr),$("#explanation_contrastiveness_descriptive_span").html(d),$("#progress").text(`Progress: ${n+1} / ${e.length}`),function(t){const e=document.getElementById("ai_answer_div"),n=[document.getElementById("button_answeronly_usertrusts"),document.getElementById("button_answeronly_userdistrusts"),document.getElementById("button_answeronly_userunsure")];function i(){n.forEach((t=>t?.removeEventListener("click",i))),function(t){const e=document.getElementById("ai_explanation_div"),n=t.split(" ").length,i=Math.max(Math.ceil(3+n/238*60),5),r=[document.getElementById("button_withexplanation_usertrusts"),document.getElementById("button_withexplanation_userdistrusts"),document.getElementById("button_withexplanation_userunsure")];function o(){r.forEach((t=>t?.removeEventListener("click",o))),function(){const t=document.getElementById("ai_explanation_quality_div"),e=[document.getElementById("button_withexplanationquality_usertrusts"),document.getElementById("button_withexplanationquality_userdistrusts"),document.getElementById("button_withexplanationquality_userunsure")];function n(){e.forEach((t=>t?.removeEventListener("click",n))),$("#button_next").show()}e.forEach((t=>t?.removeEventListener("click",n))),e.forEach((t=>t?.addEventListener("click",n))),$("#ai_explanation_quality_div").show(),f(5,t,e,null)}()}r.forEach((t=>t?.removeEventListener("click",o))),r.forEach((t=>t?.addEventListener("click",o))),$("#ai_explanation_div").show(),f(i,e,r,null)}(t)}n.forEach((t=>t?.removeEventListener("click",i))),n.forEach((t=>t?.addEventListener("click",i))),$("#ai_answer_div").show(),f(5,e,n,null)}(i.generated_rationale)}document.onvisibilitychange=()=>{document.hidden?(console.log("Window lost focus."),null!==g&&(clearInterval(g),g=null)):console.log("Window regained focus.")};const E=new URLSearchParams(window.location.search),q=E.get("start"),I=E.get("uid");if(globalThis.url_data=function(t){const e={};for(const[n,i]of t)e[n]=i;return e}(E.entries()),null==globalThis.url_data.study_id&&(globalThis.url_data.study_id="demo_study"),null==globalThis.url_data.prolific_id&&(globalThis.url_data.prolific_id="demo_user"),null==globalThis.url_data.session_id&&(globalThis.url_data.session_id="demo_session"),null!=I){if(globalThis.uid=I,"prolific_random"==globalThis.uid){let t=`${Math.floor(10*Math.random())}`.padStart(3,"0");globalThis.uid=`${E.get("prolific_queue_name")}/${t}`}}else{let t=null;for(;null==t;)t=prompt("Enter your user id. Please get in touch if you were not assigned an id but wish to participate in this experiment.");globalThis.uid=t}globalThis.noChoicesDataset=globalThis.uid.includes("vizwiz");let T=E.get("quality_type");if(null==T&&(T="vf_contr_both"),!["vf_only","contr_only","vf_contr_both","single_numeric"].includes(T))throw new Error("Invalid quality type");let k=E.get("quality_format");if(null==k&&(k="numeric"),!["numeric","descriptive"].includes(k))throw new Error("Invalid quality format");globalThis.url_data.explanation_quality_params={quality_type:T,quality_format:k},console.log("Quality params",globalThis.url_data.explanation_quality_params),globalThis.url_data.session_id.startsWith("demo"),console.log("Running with UID",globalThis.uid),async function(){return await $.getJSON(`baked_queues/${globalThis.uid}.json?t=${Date.now()}`)}().catch((t=>{console.log("Invalid user id."),console.log(globalThis.uid),window.location.reload()})).then((t=>{e=t,null!=q&&(n=parseInt(q)-1,console.log("Starting from",n)),p(0),$("#img_instr_1").attr("src",v("instructions_1")),$("#img_instr_2").attr("src",v("instructions_2")),$("#img_instr_3").attr("src",v("instructions_3")),$("#img_instr_4_vf_contr_both_numeric").attr("src",v("instructions_4_vf_contr_both_numeric")),$("#img_instr_4_vf_numeric").attr("src",v("instructions_4_vf_numeric")),$("#img_instr_4_contr_numeric").attr("src",v("instructions_4_contr_numeric")),$("#img_instr_4_single_numeric").attr("src",v("instructions_4_single_numeric")),$("#img_instr_4_vf_contr_both_descriptive").attr("src",v("instructions_4_vf_contr_both_descriptive")),$("#img_instr_4_vf_descriptive").attr("src",v("instructions_4_vf_descriptive")),$("#img_instr_4_contr_descriptive").attr("src",v("instructions_4_contr_descriptive")),function(){const t=document.getElementById("reward_instructions");t&&(t.innerHTML=`\n            If your final decision is correct, you gain a reward of $${.1.toFixed(2)}. \n            If your final decision is incorrect, you lose $${Math.abs(-.1).toFixed(2)} from your reward. \n            You will see your total reward at the end of the experiment. \n            Your payment is $2.0 plus whatever you accumulate during this experiment.\n        `)}(),$("#main_box_instructions").show(),$("#instructions_and_decorations").hide()})),console.log("Starting session with UID:",globalThis.uid);let A=!1;document.onvisibilitychange=()=>{A||(d+=1,A=!0,globalThis.uid.startsWith("demo")||alert("Please don't leave the page. If you do so again, we may restrict paying you."),A=!1)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,